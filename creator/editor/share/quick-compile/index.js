const i=require("fire-fs"),t=require("fire-path"),e=require("module-deps"),s=require("JSONStream"),r=require("concat-stream"),o=require("browser-resolve"),a=(require("async"),require("del")),l=require("browserify/lib/builtins.js"),n=require("lodash"),{promisify:c}=require("util");function h(i){return i.replace(/\\/g,"/")}function p(){this._scriptsCache={},this._scriptsToCompile=[],this._missingScripts=[],this._watchedScripts=[],this._fileStats={},this._mtimes=[],this.state="idle",this.plugins=[],this.globals={},this.exludes=[]}Object.assign(p.prototype,{async watch(i,t){await this.build(i),this._createWatcher(i)},_createWatcher(i){console.log("watching...");const e=require("chokidar");this.watching=!0;let s=(i.exts||[".js"]).map(i=>t.join(this.root,"**/*"+i)),r=e.watch(s,{ignored:t.join(this.out,"**"),ignoreInitial:!0});r.on("all",(t,e)=>{if(e=h(e),"add"===t)return e=[e].concat(this._missingScripts),this.compileScripts(e),void 0;this._scriptsCache[e]&&("change"===t?i.onlyRecordChanged?this._watchedScripts=n.union(this._watchedScripts,[e]):this.compileScripts(e):"unlink"===t&&this.removeScripts(e))}),this.watcher&&this.watcher.close(),this.watcher=r},async build(i){if(!i.entries||0===i.entries.length)throw new Error("Please specify the entries");this.entries=i.entries.map(h);let t=i.root;if(!t)throw new Error("Please specify the root directory");this.root=t;let e=i.out;if(e||(e="./quick-compile-temp"),this.out=e,i.clear)try{a.sync(e,{force:!0})}catch(i){Editor.error(i)}i.plugins&&Array.isArray(i.plugins)&&(this.plugins=i.plugins.concat(this.plugins)),i.exludes&&Array.isArray(i.exludes)&&(this.exludes=i.exludes.concat(this.exludes)),i.globals&&Object.assign(this.globals,i.globals),await this.rebuild()},async _readFileStats(){let e=t.join(this.out,"__file_stats__.json");i.existsSync(e)&&(this._fileStats=await c(i.readJson)(e))},async _writeFileStats(){let e=t.join(this.out,"__file_stats__.json");await c(i.writeJson)(e,this._fileStats)},async rebuild(){if(this.updateState("compiling"),await this._readFileStats(),this.watching){if(console.time("QuickCompiler watching rebuild finished"),0===this._watchedScripts.length)return console.timeEnd("QuickCompiler watching rebuild finished"),void 0;await Promise.all(this._watchedScripts.map(async i=>{await this._parseEntry(i,!1),this._watchedScripts.length=0}))}else console.time("QuickCompiler rebuild finished"),await Promise.all(this.entries.map(async i=>{await this._parseEntry(i,!0)})),await this._compileFinished(),console.timeEnd("QuickCompiler rebuild finished");await this._writeFileStats()},getRelativePath(i){return h(t.relative(this.root,i))},getDstPath(i){if(this.isNodeModulePath(i))return this.getNodeModuleDstPath(i);let e=this.getRelativePath(i);return h(t.join(this.out,t.stripExt(e)+".js"))},isNodeModulePath:i=>-1!==h(i).indexOf("/node_modules/"),getNodeModuleDstPath(i){let e=t.join("__node_modules",i.slice(i.indexOf("/node_modules/")+"/node_modules/".length));return e=t.stripExt(e)+".js",t.join(this.out,e)},updateState(i){this.state=i},async compileScripts(i){Array.isArray(i)||(i=[i]),this._scriptsToCompile=n.union(this._scriptsToCompile,i),await this._compileScripts()},async _compileScripts(i){this.updateState("compiling"),console.time("compileScript"),await Promise.all(this._scriptsToCompile.map(async i=>{this._parseEntry(i,!1)})),this._scriptsToCompile.length=0,await this._compileFinished(),console.timeEnd("compileScript")},async removeScripts(t,e){Array.isArray(t)||(t=[t]);let s=t.map(t=>{let e=this.getDstPath(t);i.existsSync(e)&&a.sync(e,{force:!0});let s=e+".info.json";return i.existsSync(s)&&a.sync(s,{force:!0}),e});this._scriptsToCompile=n.pullAll(this._scriptsToCompile,t);for(let i=0;i<s.length;i++)delete this._scriptsCache[s[i]];await this._compileFinished()},async _transform(e){if(this.watching&&console.time("_transform: "+e),e=h(e),this.exludes.find(i=>e.match(i)))return"";let s={src:e,dst:this.getDstPath(e)},r=await c(i.stat)(e),o=this._fileStats[e];return o&&o.mtime===r.mtime.toJSON()&&i.existsSync(s.dst)?this._scriptsCache[e]?this._scriptsCache[e]:(s.source=await c(i.readFile)(s.dst,"utf8"),s.source):(this._fileStats[e]=r,s.source=await c(i.readFile)(e,"utf8"),this.plugins.forEach(i=>{if(!this.isNodeModulePath(e)||i.nodeModule||i.transform)try{i.transform(s,this)}catch(i){Editor.error(i)}}),await c(i.ensureDir)(t.dirname(s.dst)),await c(i.writeFile)(s.dst,s.source),this.watching&&console.timeEnd("_transform: "+e),s.source)},_isFileInCache(i){return this._scriptsCache[i]},_refineScript(i){i.src=i.file.replace(/\\/g,"/"),i.dst=this.getDstPath(i.src),delete i.file;for(let t in i.deps)i.deps[t]=i.deps[t].replace(/\\/g,"/")},_parseModules(i,t,a,c){console.time(`Parse [${i}]`);let p=0,d=r(t=>{console.log(`Parse [${i}] : walk ${p}  files.`),console.timeEnd(`Parse [${i}]`);let e=t.toString();e=`{"scripts": ${e}}`;let s=[];try{s=JSON.parse(e).scripts}catch(i){Editor.error(i)}let r=this._scriptsCache;s.forEach(t=>{this._refineScript(t),(a||t.src===i)&&(r[t.src]=t)}),c()}),u={extensions:[".js",".json"],ignoreMissing:!0};if(u.modules=Object.assign(Object.create(null),l),u.cache={},u.resolve=((i,t,e)=>{t.paths=require.main.paths.concat(t.paths),o(i,t,(i,t)=>{e(i,t)})}),u.persistentCache=((t,e,s,r,o)=>{process.nextTick(()=>{a||t===i?(p++,this._transform(t).then(i=>{"string"==typeof i?r(i,o):(u.cache[t]=i,o(null,i))}).catch(i=>{o(i)})):r("module.exports = {};",o)})}),0!==Object.keys(this.globals).length){let i=require("insert-module-globals");u.globalTransform=(t=>i(t,{vars:this.globals}))}var m=new e(u);m.pipe(s.stringify()).pipe(d),m.write({file:i}),m.end(),m.on("missing",(i,t)=>{console.log(`Cannot resolve module [${i}] when parse [${t.filename}]`),this._missingScripts=n.union(this._missingScripts,[h(t.filename)])}),m.on("error",i=>{c(new Error(i))})},async _parseEntry(i,t,e){let s=await this._transform(i);s=s.source||s,await c(this._parseModules.bind(this))(i,s,t)},getSortedScripts(){let i=[],t=this._scriptsCache;for(let e in t)i.push(t[e]);return i=n.sortBy(i,"file")},async _compileFinished(){console.time("QuickCompiler compileFinished"),await Promise.all(this.plugins.map(async i=>{i.compileFinished&&c(i.compileFinished)(this)})),this.onCompileFinished&&this.onCompileFinished(),this.updateState("idle"),console.timeEnd("QuickCompiler compileFinished")}}),p.prototype._compileScripts=n.debounce(p.prototype._compileScripts,100),module.exports=p;