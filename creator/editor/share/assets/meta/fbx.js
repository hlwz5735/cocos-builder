const e=require("fire-path"),t=require("fire-fs"),r=Editor.require("unpack://node_modules/fbx2gltf"),i=require("md5"),{promisify:s}=require("util"),o=require("./gltf"),n=require("./buffer");module.exports=class extends o{constructor(e){super(e),this._convertDestPath=""}static defaultType(){return"fbx"}async importModel(s){let o=e.join(Editor.Project.path,"temp","gltf");return o=e.contains(Editor.Project.path,s)?e.join(o,e.relative(Editor.Project.path,s)):e.join(o,i(s)),o=e.join(e.dirname(o),e.basenameNoExt(o)+".gltf"),t.ensureDirSync(e.dirname(o)),new Promise((e,i)=>{r(s,o).then(r=>{console.log(`Successed converting ${s} to ${o}`);let n={meshes:[]};try{let e=t.readFileSync(r,"utf8");n=JSON.parse(e)}catch(e){return Editor.error(e),i(e)}this._convertDestPath=r,this._gltf=n,e()})})}async _createBufferMeta(r,i,o){this._bufferUuids=[],this._buffers=[];for(let u=0;u<r.buffers.length;u++){let f,a=r.buffers[u].uri;f=i[a]?i[a]:new n(this._assetdb);let c=e.join(e.dirname(this._convertDestPath),a);f.import(c,()=>{});let l=await s(t.readFile)(c);this._buffers[u]=new Uint8Array(l.buffer),this._bufferUuids.push(f.uuid),o[a]=f}}};