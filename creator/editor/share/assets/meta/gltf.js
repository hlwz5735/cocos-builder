"use strict";const e=require("fire-fs"),t=require("fire-path"),a=require("./mesh"),i=require("./prefab"),s=require("./skeleton-animation-clip"),r=require("./skeleton"),n=(require("./buffer"),require("./material")),{promisify:o}=require("util"),l=Editor.require("app://editor/core/common-asset-worker"),u=e.readJsonSync(Editor.url("unpack://static/default-assets/prefab/sprite.prefab"));module.exports=class extends Editor.metas.asset{constructor(e){super(e),this.scaleFactor=1,this.boneCount=0,this.precomputeJointMatrix=!1,this.animationFrameRate=30,this._gltf={},this._bufferUuids=[],this._buffers=[],this._modelName=""}static version(){return"1.0.14"}static defaultType(){return"gltf"}deserialize(e){super.deserialize(e);let a={};for(let i in e.subMetas){let s=e.subMetas[i],r=t.extname(i),n=this._assetdb._extname2infos[r];if(!n)continue;let o=n[0].ctor;if(!o){Editor.warn(`Can not find meta class for submeta ${i}`);continue}let l=new o(this._assetdb);l.deserialize(s),a[i]=l}this.updateSubMetas(a)}async _createMeshMeta(e,t,i){let s=e.meshes||[];for(let r=0;r<s.length;r++){let n,o=s[r].name+".mesh";n=t[o]?t[o]:new a(this._assetdb),await n.importGltf(e,this._buffers,r),i[o]=n}}async _createSkeletonMeta(e,t,a){let i=e.skins||[];for(let s=0;s<i.length;s++){let i,n=`${this._modelName}-${s}.skeleton`;i=t[n]?t[n]:new r(this._assetdb),await i.importGltf(e,this.uuid,s),a[n]=i}}async _createSkeletonAnimationMeta(e,t,a){let i=e.animations||[];for(let e=0;e<i.length;e++){let r,n=i[e].name;-1!==this._modelName.indexOf("@")&&(n=this._modelName.split("@")[1],0!==e&&(n+="_"+e));let o=n+".sac";(r=t[o]?t[o]:new s(this._assetdb)).name=n,r.modelUuid=this.uuid,r.animationID=e,r.animationFrameRate=this.animationFrameRate,await r.importGltf(this._gltf,this._buffers),a[o]=r}}_createPrefabMeta(e,t,a){let s=this._modelName+".prefab";t[s]?a[s]=t[s]:a[s]=new i(this._assetdb),a[s].content=u,a[s].readonly=!0}_createMaterialMeta(e,t,a){let i=e.materials||[];for(let e=0;e<i.length;e++){let s,r=`${i[e].name}.mtl`;s=t[r]?t[r]:new n(this._assetdb),a[r]=s}}_createBufferMeta(){}async _createSubMetas(){let e=this.getSubMetas(),t={},a=this._gltf;await this._createBufferMeta(a,e,t),await this._updateGltfNode(),await this._createMeshMeta(a,e,t),await this._createSkeletonMeta(a,e,t),await this._createSkeletonAnimationMeta(a,e,t),await this._createPrefabMeta(a,e,t),await this._createMaterialMeta(a,e,t),this.updateSubMetas(t)}async _updateGltfNode(){const e=1e-4;let t=this._gltf,a=t.nodes;for(let e=0;e<a.length;e++){let t=a[e];t.position=t.translation,t.quat=t.rotation,delete t.translation,delete t.rotation,t.name||(t.name=`${e}`);let i=t.children;if(i)for(let e=0;e<i.length;e++)a[i[e]].parent=(()=>t)}(function e(t){t.path="";let i=t.parent?t.parent():null;i&&(t.path=t.name,i.path&&(t.path=i.path+"/"+t.path));let s=t.children;if(s)for(let t=0;t<s.length;t++)e(a[s[t]])})(a[0]),this.boneCount=0;let i=t.skins||[],s=this._buffers;for(let e=0;e<i.length;e++){let a=t.skins[e],i=t.accessors[a.inverseBindMatrices],r=t.bufferViews[i.bufferView],n=s[r.buffer].buffer,o=new Float32Array(n,r.byteOffset+i.byteOffset,16*i.count),l=t.nodes,u=a.joints;for(let t=0;t<i.count;++t){let a=l[u[t]],i=[];for(let e=0;e<16;e++)i[e]=o[16*t+e];a.bindpose||(a.bindpose={},this.boneCount++),a.bindpose[e]=i}}function r(t,a){for(let i=0;i<t.length;i++)if(Math.abs(t[i]-a[i])>e)return!1;return!0}for(let e=0;e<a.length;e++){let t=a[e],i=t.bindpose;if(!i)continue;let s=!0,n=null;for(let e in i)if(n){if(!r(n,i[e])){s=!1;break}}else n=i[e];s?(t.uniqueBindPose=n,delete t.bindpose):this.precomputeJointMatrix&&Editor.warn(`Node (${t.path}) has different bindposes, precomputeJointMatrix will not work with best performance.`)}}async importModel(a){const i=e.readJsonSync(a);this._gltf=i,i.buffers&&(this._bufferUuids=[],this._buffers=[],await Promise.all(i.buffers.map(async i=>{const s=t.resolve(t.dirname(a),i.uri),r=this._assetdb.fspathToUuid(s);let n=await o(e.readFile)(s);this._buffers.push(new Uint8Array(n.buffer)),this._bufferUuids.push(r)})))}async import(e,a){if(this._modelName=t.basenameNoExt(e),await this.importModel(e),!this._gltf)return a();await this._createSubMetas();let i=new(Editor.require("unpack://engine-dev/cocos2d/core/3d/CCModel"));i.name=this._modelName,i._nodes=this._gltf.nodes,i._precomputeJointMatrix=this.precomputeJointMatrix,this._assetdb.saveAssetToLibrary(this.uuid,i),a()}async postImport(e,i){let s=[],o=[],u=[],f=[],h=this.getSubMetas();for(let e in h){let t=h[e];t instanceof a?s.push(t.uuid):t instanceof r?o.push(t.uuid):t instanceof n&&(u.push(t.uuid),f.push(t),t.name=e)}let d={gltf:this._gltf,meshIDs:s,skeletonIDs:o,materiaIDs:u,modelUuid:this.uuid,modelName:this._modelName,modelPath:e,scaleFactor:this.scaleFactor},{nodeMap:m,materials:c}=await l.start(Editor.url("app://editor/page/worker/create-model-prefab.js"),d),p=this._modelName+".prefab";try{let a=JSON.parse(m[this._modelName]);h[p].importJSON(t.join(e,p),a)}catch(e){Editor.error(e)}for(let a=0;a<f.length;a++){let i=f[a];i.dataAsSubAsset||i.importJSON(t.join(e,i.name),c[a])}this.updateSubMetas(h),i()}};