const e=require("fire-fs"),t=require("events"),r=require("async"),o=require("winston"),{promisify:i}=require("util");require("fire-path");const s=require("../../core/gulp-build"),a=require(Editor.url("app://editor/share/build-utils")),l=require("../../share/build-platforms");var n=Object.assign(new t,{DefaultButtons:{Build:1,Compile:2,Play:3},doCustomProcess(e,t,r,o){console.log(`Builder: do custom process [${e}]`),(t=Object.assign({},t)).buildResults=r,(async()=>{var r=this.simpleBuildTargets[t.actualPlatform];r&&r.messages[e]&&await new Promise((o,i)=>{Editor.Ipc.sendToMain(`${r.package}:${e}`,t,e=>{e?i(e):o()},-1)});var o=n.listeners(e);if(o)for(var s=0;s<o.length;++s){let e=o[s];await i(e)(t)}})().then(o,e=>{Editor.error(e),o(e)})},_getOptionsFromCommand(t){let r=Editor.Profile.load("profile://local/builder.json"),o=Editor.Profile.load("profile://project/builder.json"),i=a.getOptions(o,r),s=Editor.Profile.load("profile://project/project.json").data;Object.assign(i,{excludedModules:s["excluded-modules"],autoCompile:!1});let l={};if("string"==typeof t){let e=t.split(";");for(let t=0,r=e.length;t<r;t++){let r=e[t].split("=");if(!r[1])continue;let o=r[0];if("boolean"==typeof i[o])try{r[1]=JSON.parse(r[1])}catch(e){Editor.error(e)}else if("number"==typeof i[o])try{r[1]=Number.parseFloat(r[1])}catch(e){Editor.error(e)}else if(Array.isArray(i[o])){let e=`{"value": ${r[1]}}`.replace(/'/g,'"');try{let t=JSON.parse(e);r[1]=t.value}catch(e){Editor.error(e)}}else if("object"==typeof i[o]){let e=r[1].replace(/'/g,'"');try{let t=JSON.parse(e);r[1]=Object.assign({},i[o],t)}catch(e){Editor.error(e)}}l[o]=r[1]}}l.platform&&(l.actualPlatform=l.platform,l.platform=this._actualPlatform2Platform(l.actualPlatform));let n=l.configPath,d={};if(n&&e.existsSync(n))try{d=JSON.parse(e.readFileSync(n,"utf8"))}catch(e){Editor.error(`Parse ${n} failed. `+e)}const c=Editor.require("app://editor/share/build-platforms");let u=l.platform||d.platform||i.platform;if(u){console.log("platform:",u),c[u].isNative&&(i.inlineSpriteFrames=i.inlineSpriteFrames_native)}let p=Object.assign({},i,d,l);return p.buildPath?(a.updateOptions(p),{options:p}):{error:new Error("Please specify the [buildPath] option")}},_actualPlatform2Platform(e){let t=Editor.Builder.simpleBuildTargets[e];return t&&t.extends||e},_registerCommandProgressBar(){const e=require("electron");var t=new(require("progress"))("[  :state [:bar] :percent :etas  ]",{incomplete:" ",width:40,total:100});let r=0;e.ipcMain.on("builder:state-changed",(e,o,i)=>{t.tick(100*(i-r),{state:o}),r=i})},build:function(e,t){Editor.Ipc.sendToMain("builder:state-changed","start",0);var i=e.scenes,l=i.indexOf(e.startScene);if(-1===l)return Editor.error("Failed to find start scene in scene list."),void 0;if(0!==l){var d=i[0];i[0]=i[l],i[l]=d}var c=Object.assign({},e,{project:Editor.Project.path,projectName:e.title,scenes:i,debugBuildWorker:n.debugWorker});o.normal(`Start building with options : ${JSON.stringify(a.getCommonOptions(c),null,2)}`),r.waterfall([e=>{n.doCustomProcess("build-start",a.getCommonOptions(c),null,e)},e=>{s.startWithArgs(c,e)},(e,t)=>{Editor.Ipc.sendToMain("builder:state-changed","custom-build-process",.99),n.doCustomProcess("build-finished",a.getCommonOptions(c),e,t)}],r=>{r?(Editor.error("Build Failed: %s",r.stack||r),Editor.Ipc.sendToMain("builder:state-changed","error",1,r)):(Editor.log(e.platform.toLocaleLowerCase()===e.actualPlatform.toLocaleLowerCase()?'Built to "'+e.dest+'" successfully':"Built "+e.actualPlatform+" successfully"),Editor.Ipc.sendToMain("builder:state-changed","finish",1),e.includeSDKBox&&Editor.Ipc.sendToMain("sdkbox:import-query",e)),t&&t(r)})},buildCommand:function(e,t){let o=this._getOptionsFromCommand(e);if(o.error)return t(o.error);let i=o.options;this._registerCommandProgressBar(),Editor.assetdb.queryAssets(null,"scene",(e,o)=>{o=(o=o.filter(e=>-1===i.excludeScenes.indexOf(e.uuid))).map(e=>e.uuid),i.scenes=o;let s=!!o.find(function(e){return e===i.startScene});i.startScene&&s||(o.length>0?i.startScene=o[0]:i.startScene=""),r.series([e=>{console.log(`Start to build platform [${i.platform}]`),this.build(i,e)},e=>{let t=l[i.platform];if(!1===i.autoCompile||!t.isNative||!t.useTemplate)return e();console.log(`Start to compile platform [${i.platform}]`),Editor.Ipc.sendToMain("builder:state-changed","start",0),Editor.NativeUtils.compile(i,function(t){if(t)return Editor.Ipc.sendToMain("builder:state-changed","error",1),e(t);Editor.Ipc.sendToMain("builder:state-changed","finish",1),e()})}],e=>{t(e)})})},compile(e,t){let o=e.platform;if("ios"===o||"android"===o||"mac"===o||"win32"===o||"android-instant"===o)return Editor.Ipc.sendToMain("builder:state-changed","start",0),r.series([t=>{Editor.NativeUtils.compile(e,t)},t=>{Editor.Ipc.sendToMain("builder:state-changed","custom-compile-process",.99),n.doCustomProcess("compile-finished",a.getCommonOptions(e),null,t)}],e=>{if(e)return Editor.Ipc.sendToMain("builder:state-changed","error",1),Editor.failed(e),t&&t(e),void 0;t&&t(),Editor.Ipc.sendToMain("builder:state-changed","finish",1)}),void 0;t&&t(new Error(`Not support compile platform [${o}]`))},compileCommand(e,t){let r=this._getOptionsFromCommand(e);if(r.error)return t(r.error);let i=r.options;o.normal(`Start compiling with options : ${JSON.stringify(a.getCommonOptions(i),null,2)}`),this._registerCommandProgressBar(),this.compile(i,t)},debugWorker:!1,buildTemplates:Object.create(null),simpleBuildTargets:Object.create(null)});module.exports=n;