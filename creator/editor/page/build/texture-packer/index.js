const e=require("fire-path"),t=(require("async"),require("lodash"),require("fire-fs")),i=require("./utils"),r=e.join(Editor.remote.Project.path,"temp/TexturePacker/preview"),a=e.join(Editor.remote.Project.path,"temp/TexturePacker/build"),s="raw-assets";class n{async init(e){this.writer=e.writer,this.platform=e.platform;let t=await i.queryAtlases(e.files);this.spriteFrames=t.spriteFrames,this.pacInfos=t.pacInfos,this.textureUuids=t.textureUuids,this.texture2pac=t.texture2pac}needPack(e){return-1!==this.textureUuids.indexOf(e)}async pack(r){let n=[],u=Object.create(null),l=Object.create(null),o=e.join(a,s),p=this.pacInfos;for(let e of p)e.meta.uuid in r&&!e.meta.filterUnused||(e.spriteFrames=e.spriteFrames.filter(e=>e._uuid in r));let c={dest:o,pacInfos:p=p.filter(e=>e.meta.uuid in r||e.spriteFrames.length>0),buildAssets:r,needCompress:!0,platform:this.platform},d=await i.pack(c);return await Promise.all(d.map(async i=>{n=n.concat(i.unpackedTextures);let a=null;i.uuid in r&&((a=new cc.SpriteAtlas)._uuid=i.uuid);let o=i.pacInfo.meta;for(let r=0;r<i.atlases.length;++r){let n=i.atlases[r],p=require("../hash-uuid"),c=n.files.map(e=>e.uuid),d=p.calculate([c],p.BuiltinHashType.AutoAtlasTexture)[0];if(!n.compressd)throw"Cann't find atlas.compressed.";let h=n.compressd.suffix,m=e.join(this.writer.dest,"..",s,d.slice(0,2),d);await Promise.all(h.map(async e=>new Promise((i,r)=>{e=e.split("@")[0];let a=n.compressd.imagePathNoExt+e,s=m+e;t.copy(a,s,e=>{if(e)return r(e);i()})})));let f=new cc.Texture2D;f._exportedExts=h,f._uuid=d,f.width=n.width,f.height=n.height,f.packable=o.packable,f.setPremultiplyAlpha(o.premultiplyAlpha);let w=cc.Texture2D.Filter;switch(o.filterMode){case"point":f.setFilters(w.NEAREST,w.NEAREST);break;case"bilinear":case"trilinear":f.setFilters(w.LINEAR,w.LINEAR)}await this.write(f);let x=m+".png";l[d]=x;for(let e=0;e<n.files.length;++e){let t=n.files[e],i=this.generateSpriteFrame(t,d);u[i._uuid]=d,a&&(a._spriteFrames[t.name]=Editor.serialize.asAsset(i._uuid)),await this.write(i)}}a&&await this.write(a)})),{unpackedTextures:n,packedSpriteFrames:u,packedTextures:l}}generateSpriteFrame(e,t){let i=new cc.SpriteFrame,r=e.spriteFrame;i._name=e.name,i._uuid=r._uuid;let a=e.trim;return i._rect=cc.rect(a.x,a.y,a.width,a.height),i._offset=r.getOffset(),i._originalSize=cc.size(e.rawWidth,e.rawHeight),i._rotated=e.rotated,i.insetLeft=r.insetLeft,i.insetTop=r.insetTop,i.insetRight=r.insetRight,i.insetBottom=r.insetBottom,i._texture=Editor.serialize.asAsset(t),i}async write(e,t){let i=Editor.serialize(e,{exporting:!0,nicify:!0,stringify:!1,dontStripDefault:!1});await new Promise((t,r)=>{this.writer.writeJsonByUuid(e._uuid,i,e=>{if(e)return r(e);t()})})}}n.generatePreviewFiles=async function(e){let t=Editor.remote.assetdb.assetInfoByUuid(e),a=r,s=await i.queryAtlases(t);await i.pack({pacInfos:s.pacInfos,dest:a})},n.queryPreviewInfo=function(i,a){let s=Editor.url("db://assets"),n=Editor.remote.assetdb.assetInfoByUuid(i),u=e.relative(s,e.dirname(n.path)),l=e.join(r,u,e.basename(n.path)),o=e.join(l,"info.json");if(!t.existsSync(o))return a(null);let p=t.readJSONSync(o);if(!p.result)return a(null);a(null,{packedTextures:p.result.atlases.map(t=>{let i=0;t.files.forEach(e=>{i+=e.width*e.height});let r=i/(t.width*t.height)*100|0;return{path:t.imagePath,name:e.basename(t.imagePath),result:`${t.width}x${t.height}, ${r}% usage`}}),unpackedTextures:p.result.unpackedTextures.map(t=>{let i=t.originalPath||t.path,r=Editor.assetdb.remote.uuidToFspath(t.textureUuid);return{path:i,name:e.basename(r),result:t.width+"x"+t.height}})})},module.exports=n;