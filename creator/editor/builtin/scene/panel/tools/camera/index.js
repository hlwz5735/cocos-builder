const e=require("./2d"),t=require("./3d"),i=cc.color(255,0,0,89.25),s=cc.color(0,0,255,89.25),r=cc.color().fromHEX("#555555");let n=[.25,.33,.5,.67,.75,.8,.9,1,1.1,1.25,1.5,1.75,2,3,4,5],o=Editor.require("app://editor/page/gizmos/utils/transform-tool-data"),a={_camera:null,_is2D:!0,_operating:null,_operating2D:null,_operating3D:null,_scale:1,get is2D(){return o.is2D},set is2D(e){o.is2D=e,this._operating&&this._operating.setActive(!1),this._operating=e?this._operating2D:this._operating3D,this._operating.setActive(!0),this._camera.farClip=e?4096:1e9,this._camera.ortho=e,e?(this._gridRenderer.getMaterial(0).effect.getDefaultTechnique().passes[0].setDepth(!1),this._gridNode.eulerAngles=cc.v3(0,0,0)):(this._gridRenderer.getMaterial(0).effect.getDefaultTechnique().passes[0].setDepth(!0),this._gridNode.eulerAngles=cc.v3(90,0,0)),this._operating.updateCamera()},get scale(){return o.scale2D},set scale(e){o.scale2D=e},get setting(){return this._operating2D&&_Scene.view.$grid?{is2D:this.is2D,operating2D:{scale:this.scale,xAxis:_Scene.view.$grid.xAxisOffset,yAxis:_Scene.view.$grid.yAxisOffset},operating3D:{eye:this._operating3D.eye.clone(),rotation:this._operating3D.rotation.clone()}}:null},set setting(e){e&&(this._operating2D.initPosition(e.operating2D.xAxis,e.operating2D.yAxis,e.operating2D.scale),this._operating3D.eye.set(e.operating3D.eye),this._operating3D.rotation.set(e.operating3D.rotation),this.is2D=e.is2D,this._operating.updateCamera())},init(){this._camera=this.createCamera(),this._operating2D=new e,this._operating3D=new t,this._operating=this._operating2D,this._operating3D.init(this),this._operating2D.init(this),this._initGrid(),this.is2D=!0,cc.view.on("design-resolution-changed",this.onDesignResolutionChanged,this)},onDesignResolutionChanged(){this._operating.updateCamera()},onSceneLaunched(){this.adjustToCenter(20)},zoomUp(){let e=this.scale;for(let t=0;t<n.length;t++)if(e<n[t])return this._operating.zoomTo(n[t])},zoomDown(){let e=this.scale;for(let t=n.length-1;t>=0;t--)if(e>n[t])return this._operating.zoomTo(n[t])},zoomReset(){this._operating.zoomTo(1)},createCamera(){let e=new cc.Node("Editor Scene Camera");e.is3DNode=!0;let t=e.addComponent(cc.Camera);return t._init(),t.nearClip=1,t.farClip=1e9,t._camera.setStages(["opaque","transparent"]),t._camera._cullingMask=4294967295,cc.renderer.scene.addCamera(t._camera),t},update(){this._updateGrid(),this._camera.node.position=this._operating.eye,this._camera.node.setRotation(this._operating.rotation),this._camera.beforeDraw(),cc.engine.repaintInEditMode()},_updateGrid(){let e=this._gridMesh,t=cc.gfx;if(!e)return;let n=[],o=[],a=[];this._operating._updateGrid(n,o,r,1e6),n.push(cc.v2(-1e6,0)),n.push(cc.v2(1e6,0)),o.push(i),o.push(i),n.push(cc.v2(0,-1e6)),n.push(cc.v2(0,1e6)),o.push(s),o.push(s);for(let e=0;e<n.length;e++)a.push(e);e.setVertices(t.ATTR_POSITION,n),e.setVertices(t.ATTR_COLOR,o),e.setIndices(a),e.setPrimitiveType(t.PT_LINES)},_initGrid(){let e=cc.gfx;var t=new e.VertexFormat([{name:e.ATTR_POSITION,type:e.ATTR_TYPE_FLOAT32,num:2},{name:e.ATTR_COLOR,type:e.ATTR_TYPE_UINT8,num:4,normalize:!0}]);let i=new cc.Mesh;i.init(t,1e4),this._gridMesh=i,this._updateGrid();let s=new cc.Node("Scene Grid"),r=s.addComponent(cc.MeshRenderer);r.mesh=i,s.is3DNode=!0,s.parent=_Scene.view.backgroundNode,s.zIndex=-cc.macro.MAX_ZINDEX,this._gridRenderer=r,this._gridNode=s}};["onMouseDown","onMouseWheel","onMouseMove","onMouseUp","onKeyDown","onKeyUp","onResize","adjustSceneToNodes","adjustToCenter"].forEach(e=>{a[e]=function(){return this._operating[e].apply(this._operating,arguments)}}),module.exports=a;