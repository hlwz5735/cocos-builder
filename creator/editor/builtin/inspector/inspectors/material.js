"use strict";require("fs-extra");const e=require("util");Vue.component("material-property",{template:'\n    <ui-prop\n        :name="target.displayName || target.name"\n        :assetType="target.assetType || false"\n        :type="target.valueType"\n        v-value="target.value"\n        @confirm="_onDataChanged"\n    ></ui-prop>\n    ',props:{target:{twoWay:!0,type:Object}},methods:{_onDataChanged(){Editor.UI.fire(this.$el,"material-item-changed",{detail:this.target,bubbles:!0})}}}),Vue.component("material-properties",{template:'\n        <style>\n            .sub-properties-wrapper {\n                border: 1px dashed rgba(255,255,255,0.2); \n                margin: 5px;\n                padding: 5px;\n            }\n            .define-title {\n                font-weight: bold;\n            }\n        </style>\n        <div>\n            <material-property class="define-title" :target.sync="target.value" v-if="hasDefine"></material-property>\n            <div v-if="visible">\n                <div class="properties-wrapper" v-for="item in target.props" :style="{\'padding-left\': padding+\'px\'}">\n                    <material-property :target.sync="item"></material-property>\n                </div>\n                <div class="sub-properties-wrapper" v-for="item in children">\n                    <material-properties v-if="item" :target.sync="item"></material-properties>\n                </div>\n            </div>\n        </div>\n    ',props:{target:{twoWay:!0,type:Object}},computed:{hasDefine(){return!!this.target.value},padding(){return this.target.level>0?13:0},visible(){return!this.hasDefine||this.target.value.value},children(){let e=Object.assign({},this.target);return delete e.props,delete e.value,delete e.level,e}}}),module.exports={template:`\n         <style>\n            .pixelated {\n                image-rendering: pixelated;\n            }\n            .effect-content {\n                overflow: auto;\n                padding-right: 10px;\n            }\n        </style>\n        \n        <div :style="cssHost">\n            <img :style="cssIcon" :class="{ pixelated: pixelated }" \n                :src="icon"\n            />\n            <div :style="cssTitle">{{ target.__name__ }}</div>\n             <span class="flex-1"></span>\n             <ui-button class="red"\n                v-disabled="!dirty"\n                @confirm="_onCancel($event)"\n            >\n                ${Editor.T("MESSAGE.revert")}\n            </ui-button>\n            <ui-button :style="btnMargin" class="green"\n                v-disabled="!dirty"\n                @confirm="_onApply($event)"\n            >\n                ${Editor.T("MESSAGE.apply")}\n            </ui-button>\n        </div>\n         <div class="effect-content">\n            <ui-prop name="Effect" style="margin-bottom:20px;">\n                <ui-select\n                    :value="effectName"\n                    @confirm="_onEffectChanged($event)"\n                >\n                    <option\n                        v-for="type in effectTypes"\n                        :value="type"\n                    >{{type}}</option>\n                </ui-select>\n            </ui-prop>\n\n            <material-properties\n                :target.sync="displayTree" \n                @data-changed="_onDataChanged"\n            >\n            </material-properties>\n        </div>\n    `,async ready(){this.refresh()},compiled(){this.$el.addEventListener("material-item-changed",e=>{e.stopPropagation(),this._onDataChanged(e.detail)})},data:{cssHost:{display:"flex",flex:"none",flexDirection:"row",alignItems:"center",paddingBottom:"2px",margin:"5px 10px",marginBottom:"10px",borderBottom:"1px solid #666",height:"35px",overflow:"hidden"},cssIcon:{marginRight:"5px"},cssTitle:{fontWeight:"bold",textOverflow:"ellipsis",overflow:"hidden"},btnMargin:{marginLeft:"10px"},pixelated:this.icon&&this.icon.startsWith("unpack://"),effectTypes:[],props:{},defines:{},effectName:"",displayTree:{},typeMap:{},dirty:!1},watch:{target(){this.refresh()},effectName:function(e){const t={Number:"number",Boolean:"boolean",Vec2:"cc.Vec2",Vec3:"cc.Vec3",Vec4:"cc.Vec4",Color:"cc.Color",Mat4:"cc.Mat4",cc_Texture2D:"cc.Asset",cc_TextureCube:"cc.Asset"},i={cc_Texture2D:"cc.Texture2D",cc_TextureCube:"cc.TextureCube"},s=/^_[A-Za-z0-9]+/;return function(){let e=(e,s)=>Object.keys(e).map(n=>{let a=e[n],r=a.instanceType.name,p={name:n,valueType:t[r],assetType:i[r],displayName:a.displayName,defines:a.defines,type:s};return p.value=this._getValue(p),p});const n=cc.AssetLibrary.getBuiltin("effect",this.effectName);if(!n)return;const a=n?cc.Effect.parseForInspector(n):{};this.typeMap=a,this.propsList=e(a?a.props:{},"props"),this.definesList=e(a?a.defines:{},"defines").filter(e=>!s.test(e.name)),this.updateDisplayList()}}()},methods:{async updateDisplayList(){const{propsList:e,definesList:t}=this;let i={level:0};const s={},n={};for(let e in t){let i=t[e];n[i.name]=i}for(let t of e){let e=i;t.defines.forEach(t=>{"_"!==t[0]&&(e[t]||(e[t]={level:e.level+1,value:n[t]}),e=e[t],s[t]=!0)}),e.props||(e.props=[]),e.props.push(t)}for(let e of t)s[e.name]||"_"===e.name[0]||e.defines.concat(e.name).reduce((t,i)=>(t[i]||(t[i]={level:t.level+1,value:n[e.name]}),t[i]),i);this.displayTree=i},async refresh(){if(this.effectName="",this.props={},this.defines={},this.dirty=!1,!this.target)return;const t=await e.promisify(Editor.assetdb.queryInfoByUuid)(this.target.uuid),i=await e.promisify(cc.AssetLibrary.loadAsset)(this.target.uuid);this.assetInfo=t,this.props=i._props,this.defines=i._defines,this.effectName=i.effectName,this.effectTypes=Object.keys(cc.AssetLibrary.getBuiltins("effect")).filter(e=>!e.startsWith("__"))},_getValue(e){let t=e.type,i=e.name,s=this[t][i];if(void 0===s){if(!this.typeMap[t]||!this.typeMap[t][i])return"";s=this.typeMap[t][i].value}return e.assetType?{uuid:s?s.uuid||s._uuid:""}:s},_onEffectChanged(e){this.effectName=e.target.value,this.dirty=!0},_onDataChanged(e){this[e.type][e.name]=e.value,this.dirty=!0},_onCancel(){this.refresh()},_onApply(){const e=new cc.Material;e.effectName=this.effectName,e._props={},this.propsList.forEach(t=>{if(t.name in this.props){let i=this.props[t.name];if(t.assetType){let e=i&&(i.uuid||i._uuid);i=e?Editor.serialize.asAsset(e):null}else{let e=this.typeMap.props[t.name].value;e.set&&(e.set(i),i=e)}e._props[t.name]=i}}),e._defines={},this.definesList.forEach(t=>{t.name in this.defines&&(e._defines[t.name]=this.defines[t.name])});let t=Editor.serialize(e);if(Editor.remote.assetdb.isSubAssetByUuid(this.target.uuid)){let e=JSON.stringify({uuid:this.target.uuid,dataAsSubAsset:t});Editor.assetdb.saveMeta(this.target.uuid,e,e=>{if(e)return Editor.error(e);this.dirty=!1,Editor.Ipc.sendToWins("scene:soft-reload",!0)})}else Editor.assetdb.saveExists(this.assetInfo.url,t,e=>{if(e)return Editor.error(e);this.dirty=!1,Editor.Ipc.sendToWins("scene:soft-reload",!0)})}}};